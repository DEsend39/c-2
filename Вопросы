В чем основное отличие композиции от агрегации в объектно-ориентированном программировании?
время жизжизни у композиции Часть уничтожается вместе с целым а у агрегации Часть может существовать отдельно
Взиамосвязь у композиции Жёсткая связь (Whole полностью управляет Part) у Агрегации Слабая связь (Whole только использует Part)
Реализация у Композиции Объект Part создается и уничтожается а у Агрегации WholeWhole ссылается на Part, но не управляет им
Пример У Композиции Автомобиль и двигатель у Агрегации Университет и студенты

Как реализуется композиция на уровне кода, если класс Whole явно управляет временем жизни объекта Part? Приведите пример.

Класс Whole управляет жизненным циклом класса Part. Если Whole уничтожается, Part также уничтожается.
Пример:
public class Part { /*...*/ }
public class Whole {
    private Part _part = new Part();
}


Почему агрегация считается более слабым вариантом композиции? В каких случаях её предпочтительно использовать?
Агрегация — это более слабая связь, где дочерний объект может существовать независимо от родительского. Используется, когда объекты могут быть созданы и разрушены отдельно (например, студент и школа).

Что такое мощность отношения в контексте композиции и как можно реализовать её с фиксированным и динамическим количеством элементов?
Мощность отношения определяет количество дочерних элементов:
Фиксированное количество: например, класс Room с точно двумя частями.
Динамическое количество: класс Library с коллекцией Books, где количество может меняться.

Какие бывают виды ассоциации в ООП и чем двунаправленная ассоциация отличается от односторонней?
Односторонняя ассоциация: Один класс знает о другом (например, Teacher знает Students, но Students не знают Teacher).
Двунаправленная ассоциация: Оба класса знают друг о друге (например, Student знает Teacher и наоборот).

